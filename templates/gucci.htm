<!doctype html>
<html lang="en">
  <head>
    <title>GG-API GUI</title>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="static/bootstrap.min.css">
    <style>
      #results {
        width: -moz-available;
      }
      td, th {
        box-shadow: 2px 2px 2px #e9ecef;
      }
      th {
        text-align: center;
      }
      a, .btn {
        color: white !important;
      }
      .deleteRow {
        text-align: center;
        border: 1px solid red;
      }
      .deleteRow:hover {
        background: red;
        color: white;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="jumbotron jumbotron-fluid">
        <div class="container">
            <h1 class="display-3">GG-API GUI</h1>
            <p class="lead">Press buttons yo</p>
            <hr class="my-2">
            <p>List All Games and Info</p>
            <p class="lead">
                <a class="btn btn-primary btn-lg update-command" href="/api?command=addBlank" role="button">add row</a>
                <a class="btn btn-primary btn-lg" href="/guicifersecretupload" role="button">upload image</a>
                <a class="btn btn-success btn-lg update-command" href="/api?command=updateGames" role="button">save</a>
                <a class="btn btn-warning btn-lg" href="/" role="button">home</a>

            </p>
        </div>
    </div>  
    <table id="results"></table>
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="static/jquery-3.3.1.min.js"></script>
    <script src="static/popper.min.js"></script>
    <script src="static/bootstrap.min.js"></script>
    
    <script>
      // TABLE -> JSON
      function makeTableJSON(){
        var myRows = [];
        var headersText = [];
        var $headers = $("th");


        // Loop through grabbing everything
        var $rows = $("table tr").each(function(index) {
          $cells = $(this).find("td");
          myRows[index] = {};

          $cells.each(function(cellIndex) {
            // Set the header text
            if(headersText[cellIndex] === undefined) {
              headersText[cellIndex] = $($headers[cellIndex]).text();
            }
            // Update the row object with the header/cell combo
            myRows[index][headersText[cellIndex]] = $(this).text();
          });    
        });

        var myRows = myRows.slice(1);
        // Let's put this in the object like you want and convert to JSON (Note: jQuery will also do this for you on the Ajax request)
        return JSON.stringify(myRows);
      }


      function deleteRow(targetRow) {
        combined = "/api?command=deleteGame&value=" + targetRow;
        $.get(combined, function(data, status){
        switch(status) {
          case "success": 
            console.log("funsies!");
            location.reload();
            break
        }
      });
      }

      // JSON -> TABLE
      var _table_ = document.createElement('table'),
        _tr_ = document.createElement('tr'),
        _th_ = document.createElement('th'),
        _td_ = document.createElement('td');

      function buildHtmlTable(arr) {
        var table = _table_.cloneNode(false),
          columns = addAllColumnHeaders(arr, table);
        for (var i = 0, maxi = arr.length; i < maxi; ++i) {
          var tr = _tr_.cloneNode(false);
          for (var j = 0, maxj = columns.length; j < maxj; ++j) {
            var td = _td_.cloneNode(false);
            cellValue = arr[i][columns[j]];
            td.appendChild(document.createTextNode(arr[i][columns[j]] || ''));
            tr.appendChild(td);
          }
          tdel = document.createElement("td");
          tdel.classList.add("deleteRow");
          tdel.addEventListener("click", function(event){
              var targetElement = event.target.parentElement;
              deleteRow(targetElement.childNodes[0].innerText);
              console.log("Deleted: "+ targetElement.childNodes[0].innerText);
          });
          tdel.appendChild(document.createTextNode("X"));
          tr.appendChild(tdel);
          table.appendChild(tr);
        }
        return table;
      }

      function addAllColumnHeaders(arr, table) {
        var columnSet = [],
          tr = _tr_.cloneNode(false);
        for (var i = 0, l = arr.length; i < l; i++) {
          for (var key in arr[i]) {
            if (arr[i].hasOwnProperty(key) && columnSet.indexOf(key) === -1) {
              columnSet.push(key);
              var th = _th_.cloneNode(false);
              th.appendChild(document.createTextNode(key));
              tr.appendChild(th);
            }
          }
        }
        tdelh = document.createElement("th");
        tdelh.appendChild(document.createTextNode("delete row"));
        tr.appendChild(tdelh);
        table.appendChild(tr);
        return columnSet;
      }




      function checkTable() {
        var x = makeTableJSON();
        console.log(x);
        alert(x);
      }

      function makeEditable() {
        $("td").attr("contenteditable", true);
      }



      $(".list-command").click(function(event){
      event.preventDefault();
      console.log(event.currentTarget.href);
      $.get(event.currentTarget.href, function(data, status){
        switch(status) {
          case "success": 
            console.log("funsies!");
            myObj = JSON.parse(data);
            console.log(myObj);
            var newtable = buildHtmlTable(myObj);
            newtable.id = "results";
            document.body.replaceChild(newtable, document.getElementById("results"));
            makeEditable();
            break
        }
      });
    }); 


    $(".update-command").click(function(event){
      event.preventDefault();
      console.log(event.currentTarget.href);
      var combined = event.currentTarget.href + "&data=" + makeTableJSON();
      $.get(combined, function(data, status){
        switch(status) {
          case "success": 
            console.log("success!");
            location.reload();
            break
        }
      });
    }); 


    $(document).ready(function() {
      $.get("/api?command=listGames", function(data, status){
        switch(status) {
          case "success": 
            console.log("funsies!");
            myObj = JSON.parse(data);
            console.log(myObj);
            var newtable = buildHtmlTable(myObj);
            newtable.id = "results";
            document.body.replaceChild(newtable, document.getElementById("results"));
            makeEditable();
            break
        }
      });
    });
  </script>
  </body>
</html>